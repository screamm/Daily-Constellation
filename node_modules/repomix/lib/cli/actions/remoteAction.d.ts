import type { CliOptions } from '../cliRun.js';
import { type DefaultActionRunnerResult } from './defaultAction.js';
export declare const runRemoteAction: (repoUrl: string, options: CliOptions, deps?: {
    isGitInstalled: (deps?: {
        execFileAsync: typeof import("child_process").execFile.__promisify__;
    }) => Promise<boolean>;
    execGitShallowClone: (url: string, directory: string, remoteBranch?: string, deps?: {
        execFileAsync: typeof import("child_process").execFile.__promisify__;
    }) => Promise<void>;
}) => Promise<DefaultActionRunnerResult>;
export declare function isValidRemoteValue(remoteValue: string): boolean;
export declare const formatRemoteValueToUrl: (url: string) => string;
export declare const createTempDirectory: () => Promise<string>;
export declare const cloneRepository: (url: string, directory: string, remoteBranch?: string, deps?: {
    execGitShallowClone: (url: string, directory: string, remoteBranch?: string, deps?: {
        execFileAsync: typeof import("child_process").execFile.__promisify__;
    }) => Promise<void>;
}) => Promise<void>;
export declare const cleanupTempDirectory: (directory: string) => Promise<void>;
export declare const copyOutputToCurrentDirectory: (sourceDir: string, targetDir: string, outputFileName: string) => Promise<void>;
//# sourceMappingURL=remoteAction.d.ts.map