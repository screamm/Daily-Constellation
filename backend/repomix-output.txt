This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-22T12:53:32.924Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  controllers/
    constellationController.ts
  routes/
    constellationRoutes.ts
  services/
    constellationService.ts
  app.ts
  server.ts
nodemon.json
package.json
tsconfig.json

================================================================
Files
================================================================

================
File: src/controllers/constellationController.ts
================
// src/controllers/constellationController.ts
import { Request, Response } from 'express';
import { getTodaysConstellation } from '../services/constellationService';

export const getConstellation = async (req: Request, res: Response) => {
  try {
    const constellation = await getTodaysConstellation();
    res.json(constellation);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch constellation data' });
  }
};

================
File: src/routes/constellationRoutes.ts
================
// src/routes/constellationRoutes.ts
import express from 'express';
import { getConstellation } from '../controllers/constellationController';

const router = express.Router();

router.get('/', getConstellation);

export default router;

================
File: src/services/constellationService.ts
================
// src/services/constellationService.ts
import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const API_KEY = process.env.API_KEY;

export const getTodaysConstellation = async () => {
  const response = await axios.get(
    `https://api.astronomyapi.com/v1/constellations/today?apiKey=${API_KEY}`
  );
  return response.data;
};

================
File: src/app.ts
================
// src/app.ts
import express from 'express';
import cors from 'cors';
import constellationRoutes from './routes/constellationRoutes';

const app = express();

app.use(cors());
app.use(express.json());

app.use('/api/constellation', constellationRoutes);

export default app;

================
File: src/server.ts
================
import express from 'express';
import cors from 'cors'; // Importera cors
import constellationRoutes from './routes/constellationRoutes';

const app = express();

// Konfigurera CORS
app.use(cors({
  origin: 'http://localhost:5173', // Tillåt endast frontend på denna domän
  methods: ['GET', 'POST', 'PUT', 'DELETE'], // Tillåt dessa HTTP-metoder
  credentials: true, // Tillåt cookies och autentisering
}));

app.use(express.json());

app.use('/api/constellation', constellationRoutes);

export default app;

================
File: nodemon.json
================
{
    "watch": ["src"],
    "ext": "ts",
    "ignore": ["src/**/*.test.ts"],
    "exec": "ts-node ./src/server.ts"
  }

================
File: package.json
================
{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node dist/server.js",
    "build": "tsc",
    "dev": "nodemon"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2"
  },
  "devDependencies": {
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.0",
    "@types/node": "^22.10.7",
    "nodemon": "^3.1.9",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.3"
  }
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES6",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true
  }
}
